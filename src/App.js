import logo from './logo.svg';
import './App.css';
import {React, Component} from 'react';

class CommentBox extends Component {
	state = { 
				data: this.props.initialData, 
				userData: this.props.initialUserData,
				accessToken : this.props.accessToken
			};

	getTokenAndCallAPI = async () => {
		console.log("Loading data...");
		// Get access token to the API. 
		var myHeaders = new Headers();
		myHeaders.append("Content-Type", "text/plain");

		var raw = "grant_type=password&username=phonixadmin&password=Admin_123";

		var requestOptions = {
			method: 'POST',
			headers: myHeaders,
			body: raw,
			redirect: 'follow'
		};

		var userData2;

		if (this.state.accessToken.length == 0)
		{
			const token = await fetch("http://localhost/disha2adminapi/api/ApplicationUser/GetToken?userName=phonixadmin&password=Admin_123", requestOptions)
				.then(response => response.text())
				.catch(error => console.log('error', error));

			

			console.log("Token response: " + token);

			this.setState({ accessToken: JSON.parse(token).access_token });
		}

		let headers = { 'Accept': 'application/json', };
		if (this.state.accessToken) {
			headers["Authorization"] = `Bearer ${this.state.accessToken}`;
		}
		//console.log(headers);


		fetch("http://localhost/disha2adminapi/api/applicationuser/getinfolist", { headers, })
		.then(response => response.text())
			.then(result => {
				//console.log(result);
				userData2 = result;
				this.setState({ userData: JSON.parse(userData2) });

			})
			.catch(error => console.log('error', error));
	}

	loadCommentsFromServer = async () => {
		await this.getTokenAndCallAPI();
	};

	handleCommentSubmit = comment => {
		var comments = this.state.data;
		// Optimistically set an id on the new comment. It will be replaced by an
		// id generated by the server. In a production application you would likely
		// not use Date.now() for this and would have a more robust system in place.
		comment.id = Date.now();
		var newComments = comments.concat([comment]);
		this.setState({ data: newComments });

		var data = new FormData();
		data.append('author', comment.author);


		data.append('text', comment.text + " ");

		var xhr = new XMLHttpRequest();
		xhr.open('post', this.props.submitUrl, true);
		xhr.onload = function () {
			this.loadCommentsFromServer();
		}.bind(this);
		xhr.send(data);
	};

	componentDidMount() {
		window.setInterval(this.loadCommentsFromServer, this.props.pollInterval);





	}

	render() {
		return (
			<div className="commentBox">
				<h3>List of Users</h3>

				<UserList userData={this.state.userData} />

			</div>
		);
	}
}

class Welcome extends Component {
	render() {
		return <h1>Hello, {this.props.name}</h1>;
	}
}

class CommentList extends Component {
	render() {
		var commentNodes = this.props.data.map(function (comment) {
			return (
				<Comment author={comment.author} key={comment.id}>
					{comment.text}
				</Comment>
			);
		});
		return <div className="commentList">{commentNodes}</div>;
	}
}

class UserList extends Component {


	render() {
		const userData = this.props.userData.map(({ name, firstName, lastName, email, mobileNo, userId }) => ({ name, firstName, lastName, email, mobileNo }));

		return (
			<table className="table-bordered table-striped">
				<thead>
					<tr style={{ fontWeight: "bold" }}>
						<td>Name</td>
						<td>Mobile</td>
						<td>Email</td>
					</tr>
				</thead>
				<tbody>
					{userData.map((row, index) => (
						<tr key={index}>
							<td>{row.name}</td>
							<td>{row.mobileNo}</td>
							<td>{row.email}</td>
						</tr>
					))}
				</tbody>
			</table>
		)
	}
}

class CommentForm extends Component {
	state = {
		author: '',
		text: ''
	};

	handleAuthorChange = e => {
		this.setState({ author: e.target.value });
	};

	handleTextChange = e => {
		this.setState({ text: e.target.value });
	};

	handleSubmit = e => {
		e.preventDefault();
		var author = this.state.author.trim();
		var text = this.state.text.trim();
		if (!text || !author) {
			return;
		}
		this.props.onCommentSubmit({ author: author, text: text });
		this.setState({ author: '', text: '' });
	};

	render() {
		return (
			<form className="commentForm" onSubmit={this.handleSubmit}>
				<h4>Add a New Comment below.</h4>
				<div class="row">
					<div class="col-md-3">
						<input
							type="text"
							placeholder="Your name"
							value={this.state.author}
							onChange={this.handleAuthorChange}
						/>
					</div>
					<div class="col-md-3">
						<input
							type="text"
							placeholder="Say something..."
							value={this.state.text}
							onChange={this.handleTextChange}
						/>

					</div>
				</div>
				<br />
				<div class="row">
					<div class="col-md-2">
						<input type="submit" value="Post" class="btn btn-primary" />
					</div></div>
			</form>
		);
	}
}

function createRemarkable() {
	var remarkable =
		'undefined' != typeof global && global.Remarkable
			? global.Remarkable
			: window.Remarkable;

	return new remarkable();
}

class Comment extends Component {
	rawMarkup = () => {
		var md = createRemarkable();
		var rawMarkup = md.render(this.props.children.toString());
		return { __html: rawMarkup };
	};

	render() {
		return (
			<div className="comment">
				<h2 className="commentAuthor">{this.props.author}</h2>
				<span dangerouslySetInnerHTML={this.rawMarkup()} />
			</div>
		);
	}
}

class User extends Component {

	render() {
		return (
			<div className="comment">
				<h4 className="commentAuthor">{this.props.name}</h4>
				<h5>{this.props.mobile}</h5>
			</div>
		);
	}
}


function App() {
  return (
    <div className="App">
      <header className="App-header">
        <img src={logo} className="App-logo" alt="logo" />
        <p>
          Edit <code>src/App.js</code> and save to reload.
        </p>
        <a
          className="App-link"
          href="https://reactjs.org"
          target="_blank"
          rel="noopener noreferrer"
        >
          Learn React faster
        </a>
      </header>
    </div>
  );
}

export default CommentBox;
